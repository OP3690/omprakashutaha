{"ast":null,"code":"var _jsxFileName = \"/Users/omprakashutaha/Desktop/OmprakashUtaha/src/styles/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport theme from './theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // Check for saved theme preference or default to system preference\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      return savedTheme === 'dark';\n    }\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n  useEffect(() => {\n    // Save theme preference to localStorage\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n\n    // Update document class for global styling\n    document.documentElement.classList.toggle('dark', isDarkMode);\n  }, [isDarkMode]);\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n\n  // Create current theme object based on mode\n  const currentTheme = {\n    ...theme,\n    isDarkMode,\n    colors: {\n      ...theme.colors,\n      background: isDarkMode ? theme.colors.dark.background : theme.colors.light.background,\n      text: isDarkMode ? theme.colors.dark.text : theme.colors.light.text,\n      border: isDarkMode ? theme.colors.dark.border : theme.colors.light.border,\n      status: {\n        success: isDarkMode ? theme.colors.status.success.dark : theme.colors.status.success.light,\n        warning: isDarkMode ? theme.colors.status.warning.dark : theme.colors.status.warning.light,\n        error: isDarkMode ? theme.colors.status.error.dark : theme.colors.status.error.light,\n        info: isDarkMode ? theme.colors.status.info.dark : theme.colors.status.info.light\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme: currentTheme,\n      isDarkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"gVQgoxDOuSNRDqDs5cnOKP0X/GA=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","theme","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","context","Error","ThemeProvider","children","_s2","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","window","matchMedia","matches","setItem","document","documentElement","classList","toggle","toggleTheme","prev","currentTheme","colors","background","dark","light","text","border","status","success","warning","error","info","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/omprakashutaha/Desktop/OmprakashUtaha/src/styles/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport theme from './theme';\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport const ThemeProvider = ({ children }) => {\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // Check for saved theme preference or default to system preference\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      return savedTheme === 'dark';\n    }\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n\n  useEffect(() => {\n    // Save theme preference to localStorage\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n    \n    // Update document class for global styling\n    document.documentElement.classList.toggle('dark', isDarkMode);\n  }, [isDarkMode]);\n\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n\n  // Create current theme object based on mode\n  const currentTheme = {\n    ...theme,\n    isDarkMode,\n    colors: {\n      ...theme.colors,\n      background: isDarkMode ? theme.colors.dark.background : theme.colors.light.background,\n      text: isDarkMode ? theme.colors.dark.text : theme.colors.light.text,\n      border: isDarkMode ? theme.colors.dark.border : theme.colors.light.border,\n      status: {\n        success: isDarkMode ? theme.colors.status.success.dark : theme.colors.status.success.light,\n        warning: isDarkMode ? theme.colors.status.warning.dark : theme.colors.status.warning.light,\n        error: isDarkMode ? theme.colors.status.error.dark : theme.colors.status.error.light,\n        info: isDarkMode ? theme.colors.status.info.dark : theme.colors.status.info.light\n      }\n    }\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme: currentTheme, isDarkMode, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}